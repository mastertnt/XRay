<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:XControls"
                    xmlns:themes="clr-namespace:XControls.Themes"
                    xmlns:prim="clr-namespace:XControls.Primitives"
                    xmlns:buttonSpinner="clr-namespace:XControls.ButtonSpinner"
                    xmlns:watermarkTextBox="clr-namespace:XControls.WatermarkTextBox"
                    xmlns:numericUpDown="clr-namespace:XControls.NumericUpDown">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/XControls;component/Themes/Resources/All.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Watermark template for the NumericUpDown control. -->
    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0" />
    </DataTemplate>

    <!-- Watermark template for the NumericUpDown control as presenter. -->
    <DataTemplate x:Key="PresenterWatermarkTemplate">
        <ContentControl Content="{Binding}" Focusable="False" Margin="0,0,3,0" />
    </DataTemplate>

    <!-- NumericUpDown base style. -->
    <Style x:Key="NumericUpDown" TargetType="{x:Type prim:InputBase}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type prim:InputBase}">
                    <buttonSpinner:ButtonSpinner x:Name="PART_Spinner"
                                         IsTabStop="False"
                                         Background="{TemplateBinding Background}"
                                         BorderThickness="{TemplateBinding BorderThickness}"
                                         BorderBrush="{TemplateBinding BorderBrush}"
                                         HorizontalContentAlignment="Stretch"
                                         VerticalContentAlignment="Stretch"
                                         AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                                         ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}"
                                         ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}"
                                         ShowInfiniteButton="{Binding InfiniteValue, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToBoolConverter}}">
                        <watermarkTextBox:WatermarkTextBox x:Name="PART_TextBox"
                                          BorderThickness="0"
                                          Background="Transparent"
                                          ContextMenu="{TemplateBinding ContextMenu}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          Foreground="{TemplateBinding Foreground}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                          IsTabStop="{TemplateBinding IsTabStop}"
                                          MinWidth="20"
                                          AcceptsReturn="False"
                                          Padding="{TemplateBinding Padding}"
                                          AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}"
                                          AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextWrapping="NoWrap"
                                          TabIndex="{TemplateBinding TabIndex}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                          WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                    </buttonSpinner:ButtonSpinner>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlMouseOverBorderKey}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                        <Trigger Property="IsPresenter" Value="True">
                            <Setter Property="ShowButtonSpinner" Value="false" TargetName="PART_Spinner" />
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                            <Setter Property="Focusable" Value="false" TargetName="PART_TextBox" />
                            <Setter Property="Cursor" Value="Arrow" TargetName="PART_TextBox"  />
                            <Setter Property="BorderBrush" Value="{x:Null}" />
                            <Setter Property="WatermarkTemplate" Value="{StaticResource PresenterWatermarkTemplate}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Specific NumericUpDown styles. -->
    <Style TargetType="{x:Type numericUpDown:DecimalUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:DoubleUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:Int16UpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:Int32UpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:Int64UpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:ShortUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:LongUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:ByteUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:SingleUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:SByteUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:UInt16UpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:UInt32UpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:UInt64UpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:ULongUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type numericUpDown:UShortUpDown}" BasedOn="{StaticResource NumericUpDown}" />

</ResourceDictionary>
